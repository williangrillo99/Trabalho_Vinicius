"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: usuario.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsuarioClient = exports.UsuarioService = exports.LoginRequest = exports.UsuarioResponse = exports.CriarUsuarioRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "";
function createBaseCriarUsuarioRequest() {
    return { nome: "", cpfCnpj: "", senha: "", idClientAssas: "" };
}
exports.CriarUsuarioRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nome !== "") {
            writer.uint32(10).string(message.nome);
        }
        if (message.cpfCnpj !== "") {
            writer.uint32(18).string(message.cpfCnpj);
        }
        if (message.senha !== "") {
            writer.uint32(26).string(message.senha);
        }
        if (message.idClientAssas !== "") {
            writer.uint32(34).string(message.idClientAssas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCriarUsuarioRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nome = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.cpfCnpj = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.senha = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.idClientAssas = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nome: isSet(object.nome) ? globalThis.String(object.nome) : "",
            cpfCnpj: isSet(object.cpfCnpj) ? globalThis.String(object.cpfCnpj) : "",
            senha: isSet(object.senha) ? globalThis.String(object.senha) : "",
            idClientAssas: isSet(object.idClientAssas) ? globalThis.String(object.idClientAssas) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nome !== "") {
            obj.nome = message.nome;
        }
        if (message.cpfCnpj !== "") {
            obj.cpfCnpj = message.cpfCnpj;
        }
        if (message.senha !== "") {
            obj.senha = message.senha;
        }
        if (message.idClientAssas !== "") {
            obj.idClientAssas = message.idClientAssas;
        }
        return obj;
    },
    create(base) {
        return exports.CriarUsuarioRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCriarUsuarioRequest();
        message.nome = object.nome ?? "";
        message.cpfCnpj = object.cpfCnpj ?? "";
        message.senha = object.senha ?? "";
        message.idClientAssas = object.idClientAssas ?? "";
        return message;
    },
};
function createBaseUsuarioResponse() {
    return { id: 0, cpfCnpj: "", nome: "", idClientAssas: "" };
}
exports.UsuarioResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.cpfCnpj !== "") {
            writer.uint32(18).string(message.cpfCnpj);
        }
        if (message.nome !== "") {
            writer.uint32(26).string(message.nome);
        }
        if (message.idClientAssas !== "") {
            writer.uint32(34).string(message.idClientAssas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUsuarioResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.cpfCnpj = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nome = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.idClientAssas = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            cpfCnpj: isSet(object.cpfCnpj) ? globalThis.String(object.cpfCnpj) : "",
            nome: isSet(object.nome) ? globalThis.String(object.nome) : "",
            idClientAssas: isSet(object.idClientAssas) ? globalThis.String(object.idClientAssas) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.cpfCnpj !== "") {
            obj.cpfCnpj = message.cpfCnpj;
        }
        if (message.nome !== "") {
            obj.nome = message.nome;
        }
        if (message.idClientAssas !== "") {
            obj.idClientAssas = message.idClientAssas;
        }
        return obj;
    },
    create(base) {
        return exports.UsuarioResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUsuarioResponse();
        message.id = object.id ?? 0;
        message.cpfCnpj = object.cpfCnpj ?? "";
        message.nome = object.nome ?? "";
        message.idClientAssas = object.idClientAssas ?? "";
        return message;
    },
};
function createBaseLoginRequest() {
    return { cpfCnpj: "", senha: "" };
}
exports.LoginRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.cpfCnpj !== "") {
            writer.uint32(10).string(message.cpfCnpj);
        }
        if (message.senha !== "") {
            writer.uint32(18).string(message.senha);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLoginRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.cpfCnpj = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.senha = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            cpfCnpj: isSet(object.cpfCnpj) ? globalThis.String(object.cpfCnpj) : "",
            senha: isSet(object.senha) ? globalThis.String(object.senha) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.cpfCnpj !== "") {
            obj.cpfCnpj = message.cpfCnpj;
        }
        if (message.senha !== "") {
            obj.senha = message.senha;
        }
        return obj;
    },
    create(base) {
        return exports.LoginRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLoginRequest();
        message.cpfCnpj = object.cpfCnpj ?? "";
        message.senha = object.senha ?? "";
        return message;
    },
};
exports.UsuarioService = {
    adicionar: {
        path: "/Usuario/Adicionar",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CriarUsuarioRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CriarUsuarioRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.UsuarioResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.UsuarioResponse.decode(value),
    },
    login: {
        path: "/Usuario/Login",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.LoginRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.LoginRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.UsuarioResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.UsuarioResponse.decode(value),
    },
};
exports.UsuarioClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.UsuarioService, "Usuario");
function isSet(value) {
    return value !== null && value !== undefined;
}
